Grammar

    0 $accept: Prog $end

    1 Prog: Declarations StmtSeq

    2 Declarations: Dec Declarations
    3             | %empty

    4 $@1: %empty

    5 Dec: Int Ident $@1 ';'

    6 StmtSeq: Stmt StmtSeq
    7        | %empty

    8 Stmt: Write Expr ';'
    9     | Id '=' Expr ';'
   10     | IF '(' BExpr ')' '{' StmtSeq '}'

   11 BExpr: Expr EQ Expr

   12 Expr: Expr '+' Term
   13     | Expr '-' Term
   14     | Term

   15 Term: Term '*' Factor
   16     | Term '/' Factor
   17     | Factor

   18 Factor: IntLit
   19       | Ident

   20 Id: Ident


Terminals, with rules where they appear

$end (0) 0
'(' (40) 10
')' (41) 10
'*' (42) 15
'+' (43) 12
'-' (45) 13
'/' (47) 16
';' (59) 5 8 9
'=' (61) 9
'{' (123) 10
'}' (125) 10
error (256)
Ident (258) 5 19 20
IntLit (259) 18
Int (260) 5
Write (261) 8
IF (262) 10
EQ (263) 11


Nonterminals, with rules where they appear

$accept (19)
    on left: 0
Prog (20)
    on left: 1, on right: 0
Declarations (21)
    on left: 2 3, on right: 1 2
Dec (22)
    on left: 5, on right: 2
$@1 (23)
    on left: 4, on right: 5
StmtSeq (24)
    on left: 6 7, on right: 1 6 10
Stmt (25)
    on left: 8 9 10, on right: 6
BExpr (26)
    on left: 11, on right: 10
Expr (27)
    on left: 12 13 14, on right: 8 9 11 12 13
Term (28)
    on left: 15 16 17, on right: 12 13 14 15 16
Factor (29)
    on left: 18 19, on right: 15 16 17
Id (30)
    on left: 20, on right: 9


State 0

    0 $accept: . Prog $end

    Int  shift, and go to state 1

    $default  reduce using rule 3 (Declarations)

    Prog          go to state 2
    Declarations  go to state 3
    Dec           go to state 4


State 1

    5 Dec: Int . Ident $@1 ';'

    Ident  shift, and go to state 5


State 2

    0 $accept: Prog . $end

    $end  shift, and go to state 6


State 3

    1 Prog: Declarations . StmtSeq

    Ident  shift, and go to state 7
    Write  shift, and go to state 8
    IF     shift, and go to state 9

    $default  reduce using rule 7 (StmtSeq)

    StmtSeq  go to state 10
    Stmt     go to state 11
    Id       go to state 12


State 4

    2 Declarations: Dec . Declarations

    Int  shift, and go to state 1

    $default  reduce using rule 3 (Declarations)

    Declarations  go to state 13
    Dec           go to state 4


State 5

    5 Dec: Int Ident . $@1 ';'

    $default  reduce using rule 4 ($@1)

    $@1  go to state 14


State 6

    0 $accept: Prog $end .

    $default  accept


State 7

   20 Id: Ident .

    $default  reduce using rule 20 (Id)


State 8

    8 Stmt: Write . Expr ';'

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Expr    go to state 17
    Term    go to state 18
    Factor  go to state 19


State 9

   10 Stmt: IF . '(' BExpr ')' '{' StmtSeq '}'

    '('  shift, and go to state 20


State 10

    1 Prog: Declarations StmtSeq .

    $default  reduce using rule 1 (Prog)


State 11

    6 StmtSeq: Stmt . StmtSeq

    Ident  shift, and go to state 7
    Write  shift, and go to state 8
    IF     shift, and go to state 9

    $default  reduce using rule 7 (StmtSeq)

    StmtSeq  go to state 21
    Stmt     go to state 11
    Id       go to state 12


State 12

    9 Stmt: Id . '=' Expr ';'

    '='  shift, and go to state 22


State 13

    2 Declarations: Dec Declarations .

    $default  reduce using rule 2 (Declarations)


State 14

    5 Dec: Int Ident $@1 . ';'

    ';'  shift, and go to state 23


State 15

   19 Factor: Ident .

    $default  reduce using rule 19 (Factor)


State 16

   18 Factor: IntLit .

    $default  reduce using rule 18 (Factor)


State 17

    8 Stmt: Write Expr . ';'
   12 Expr: Expr . '+' Term
   13     | Expr . '-' Term

    ';'  shift, and go to state 24
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26


State 18

   14 Expr: Term .
   15 Term: Term . '*' Factor
   16     | Term . '/' Factor

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 14 (Expr)


State 19

   17 Term: Factor .

    $default  reduce using rule 17 (Term)


State 20

   10 Stmt: IF '(' . BExpr ')' '{' StmtSeq '}'

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    BExpr   go to state 29
    Expr    go to state 30
    Term    go to state 18
    Factor  go to state 19


State 21

    6 StmtSeq: Stmt StmtSeq .

    $default  reduce using rule 6 (StmtSeq)


State 22

    9 Stmt: Id '=' . Expr ';'

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Expr    go to state 31
    Term    go to state 18
    Factor  go to state 19


State 23

    5 Dec: Int Ident $@1 ';' .

    $default  reduce using rule 5 (Dec)


State 24

    8 Stmt: Write Expr ';' .

    $default  reduce using rule 8 (Stmt)


State 25

   12 Expr: Expr '+' . Term

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Term    go to state 32
    Factor  go to state 19


State 26

   13 Expr: Expr '-' . Term

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Term    go to state 33
    Factor  go to state 19


State 27

   15 Term: Term '*' . Factor

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Factor  go to state 34


State 28

   16 Term: Term '/' . Factor

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Factor  go to state 35


State 29

   10 Stmt: IF '(' BExpr . ')' '{' StmtSeq '}'

    ')'  shift, and go to state 36


State 30

   11 BExpr: Expr . EQ Expr
   12 Expr: Expr . '+' Term
   13     | Expr . '-' Term

    EQ   shift, and go to state 37
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26


State 31

    9 Stmt: Id '=' Expr . ';'
   12 Expr: Expr . '+' Term
   13     | Expr . '-' Term

    ';'  shift, and go to state 38
    '+'  shift, and go to state 25
    '-'  shift, and go to state 26


State 32

   12 Expr: Expr '+' Term .
   15 Term: Term . '*' Factor
   16     | Term . '/' Factor

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 12 (Expr)


State 33

   13 Expr: Expr '-' Term .
   15 Term: Term . '*' Factor
   16     | Term . '/' Factor

    '*'  shift, and go to state 27
    '/'  shift, and go to state 28

    $default  reduce using rule 13 (Expr)


State 34

   15 Term: Term '*' Factor .

    $default  reduce using rule 15 (Term)


State 35

   16 Term: Term '/' Factor .

    $default  reduce using rule 16 (Term)


State 36

   10 Stmt: IF '(' BExpr ')' . '{' StmtSeq '}'

    '{'  shift, and go to state 39


State 37

   11 BExpr: Expr EQ . Expr

    Ident   shift, and go to state 15
    IntLit  shift, and go to state 16

    Expr    go to state 40
    Term    go to state 18
    Factor  go to state 19


State 38

    9 Stmt: Id '=' Expr ';' .

    $default  reduce using rule 9 (Stmt)


State 39

   10 Stmt: IF '(' BExpr ')' '{' . StmtSeq '}'

    Ident  shift, and go to state 7
    Write  shift, and go to state 8
    IF     shift, and go to state 9

    $default  reduce using rule 7 (StmtSeq)

    StmtSeq  go to state 41
    Stmt     go to state 11
    Id       go to state 12


State 40

   11 BExpr: Expr EQ Expr .
   12 Expr: Expr . '+' Term
   13     | Expr . '-' Term

    '+'  shift, and go to state 25
    '-'  shift, and go to state 26

    $default  reduce using rule 11 (BExpr)


State 41

   10 Stmt: IF '(' BExpr ')' '{' StmtSeq . '}'

    '}'  shift, and go to state 42


State 42

   10 Stmt: IF '(' BExpr ')' '{' StmtSeq '}' .

    $default  reduce using rule 10 (Stmt)
